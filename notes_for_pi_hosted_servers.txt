# https://docs.linuxserver.io/faq#libseccomp

mkdir -p /home/pi/docker/{portainer,qbittorrent,downloads,h5ai,filebrowser,ngrok,qbot,duckdns}

# run as root user
docker run -d \
    --name portainer \
    --label com.centurylinklabs.watchtower.enable=true \
    --restart=unless-stopped \
    -u $UID:$GID \
    -p 8000:8000 -p 8010:9000 \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -v /home/pi/docker/portainer:/data \
    portainer/portainer-ce:latest

docker run -d \
  --name=qbittorrent \
  --label com.centurylinklabs.watchtower.enable=true \
  -e PUID=$(id -u) \
  -e PGID=$(id -g) \
  -e TZ=Asia/Kolkata \
  -e WEBUI_PORT=8080 \
  -p 6881:6881 \
  -p 6881:6881/udp \
  -p 8020:8080 \
  -v /home/pi/docker/qbittorrent:/config \
  -v /home/pi/docker/downloads:/downloads \
  --restart unless-stopped \
  lscr.io/linuxserver/qbittorrent:latest
# For fixing error: "Unauthorized"
# https://github.com/guillaumedsde/alpine-qbittorrent-openvpn/issues/32
# Delete container and redeploy

docker run -d \
  --name=h5ai \
  --label com.centurylinklabs.watchtower.enable=true \
  -p 8030:80 \
  -v /home/pi/docker/downloads:/h5ai \
  -v /home/pi/docker/h5ai:/config \
  -e PUID=$(id -u) `# must be non root user id`\
  -e PGID=$(id -g) `# must be non root user id`\
  -e TZ=Asia/Kolkata \
  --restart unless-stopped \
  bin20088/h5ai:latest

touch /home/pi/docker/filebrowser/filebrowser.db
# https://github.com/filebrowser/filebrowser/blob/master/docker/root/defaults/settings.json
# https://github.com/filebrowser/filebrowser/issues/534
nano /home/pi/docker/filebrowser/settings.json
{
  "port": 80,
  "baseURL": "",
  "address": "",
  "log": "stdout",
  "database": "/database/filebrowser.db",
  "root": "/srv",
  "noauth": true
}

docker run -d \
    --name=filebrowser \
    --label com.centurylinklabs.watchtower.enable=true \
    -v /home/pi/docker/downloads:/srv \
    -v /home/pi/docker/filebrowser/filebrowser.db:/database/filebrowser.db \
    -v /home/pi/docker/filebrowser/settings.json:/config/settings.json \
    -e PUID=$(id -u) \
    -e PGID=$(id -g) \
    -p 8040:80 \
    filebrowser/filebrowser:s6

# ngrok configuration
nano /home/pi/docker/ngrok/ngrok.yml

version: 2
authtoken: ABC1234
region: in
console_ui: false
log_level: info
log_format: logfmt
log: stdout
web_addr: localhost:4040
tunnels:
  portainer:
    addr: 8010
    schemes:
      - http
    inspect: false
    proto: http
  qbittorrent:
    addr: 8020
    schemes:
      - http
    inspect: false
    proto: http
  h5ai:
    addr: 8030
    schemes:
      - http
    inspect: false
    proto: http
  filebrowser:
    addr: 8040
    schemes:
      - http
    inspect: false
    proto: http
  ssh:
    addr: 22
    inspect: false
    proto: tcp

docker run -d \
    --name=ngrok \
    --restart=unless-stopped \
    --net=host \
    --label com.centurylinklabs.watchtower.enable=true \
    -v /home/pi/docker/ngrok/ngrok.yml:/etc/ngrok.yml \
    -e NGROK_CONFIG=/etc/ngrok.yml \
    -u $UID:$GID \
    ngrok/ngrok:alpine start --all

# run as root user
docker run -d \
    --name watchtower \
    --restart=unless-stopped \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -e WATCHTOWER_CLEANUP=true \
    -e WATCHTOWER_REMOVE_VOLUMES=true \
    -e WATCHTOWER_INCLUDE_RESTARTING=true \
    -e WATCHTOWER_INCLUDE_STOPPED=true \
    -e WATCHTOWER_REVIVE_STOPPED=true \
    -e WATCHTOWER_ROLLING_RESTART=true \
    -e WATCHTOWER_LABEL_ENABLE=true \
    -u $UID:$GID \
    containrrr/watchtower:latest

# noip dynamic update client setup
# https://www.github.com/aanousakis/no-ip
docker run -d \
  --name=noip \
  --restart=unless-stopped \
  --label com.centurylinklabs.watchtower.enable=true \
  -e USERNAME=NOIP_USER_NAME \
  -e PASSWORD=NOIP_PASSWORD \
  -e "DOMAINS=NOIP_HOSTNAME" \
  -e INTERVAL=60 \
  aanousakis/no-ip:latest

# duckdns
docker run -d \
  --name=duckdns \
  -e PUID=$(id -u) \
  -e PGID=$(id -g) \
  -e TZ=Asia/Kolkata \
  -e SUBDOMAINS=subdomain \
  -e TOKEN=token \
  -e LOG_FILE=true \
  -v /home/pi/docker/duckdns:/config \
  --restart unless-stopped \
  --label com.centurylinklabs.watchtower.enable=true \
  lscr.io/linuxserver/duckdns

# to get the trackers list
#!/bin/sh
set -e
OUT_FILE="/home/ampere/docker/downloads/trackers.txt"
if [ -e $OUT_FILE ]; then rm $OUT_FILE; fi
tracker_list=$(curl -Ns https://raw.githubusercontent.com/XIU2/TrackersListCollection/master/all.txt https://ngosang.github.io/trackerslist/trackers_all_http.txt https://newtrackon.com/api/all https://raw.githubusercontent.com/DeSireFire/animeTrackerList/master/AT_all.txt https://raw.githubusercontent.com/hezhijie0327/Trackerslist/main/trackerslist_tracker.txt https://raw.githubusercontent.com/hezhijie0327/Trackerslist/main/trackerslist_exclude.txt | awk '$0' | tr '\n\n' ',')
qbit_tracker_list=$(for line in $(echo "$tracker_list" | tr ',' '\n'); do echo -n "$line\\\n"; done)
echo "$qbit_tracker_list" > $OUT_FILE

# to setup telebit using docker [https://git.coolaj86.com/coolaj86/telebit.js]
1. Run a Debian container.
   docker run --name debian -it debian:bullseye-slim
2. Install systemd and curl inside the container.
   apt-get update && apt-get install -y systemd curl
3. Exit from the container and create a base image for telebit.
   docker commit debian tele:base
4. Create a container from this image to setup telebit [https://medium.com/swlh/docker-and-systemd-381dfd7e4628]
   docker run -d --name telebit --net host --restart unless-stopped --privileged -v /sys/fs/cgroup/:/sys/fs/cgroup:ro --tmpfs /tmp --tmpfs /run --entrypoint /lib/systemd/systemd tele:base
5. Install telebit inside the container.
   docker exec -it telebit /bin/bash
   curl -fsSL https://get.telebit.io | bash
